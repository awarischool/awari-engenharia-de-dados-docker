version: '3.7'
networks:
  awari-pipelines:
      driver: bridge
      ipam:
          driver: default
          config:
              - subnet: "172.18.0.0/16"
                gateway: "172.18.0.1"

# Settings and configurations that are common for all minio containers
x-minio-common: &minio-common
  image: minio/minio:RELEASE.2023-02-22T18-23-45Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# Settings dna configuration for apache-airflow
x-awari-airflow-common: &awari-airflow-common
  build: 
    dockerfile: ../data/airflow/Dockerfile
  user: "${AIRFLOW_UID}:0"
  env_file: 
    - ../data/airflow/.env
  volumes:
    - ../data/airflow/dags:/opt/airflow/dags
    - ../data/airflow/logs:/opt/airflow/logs
    - ../data/airflow/downloads:/opt/airflow/downloads
    - ../data/airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock

x-awari-airflow-depends-on: &awari-airflow-depends-on
  depends_on:
    awari-airflow-postgres:
      condition: service_healthy
    awari-airflow-init:
      condition: service_completed_successfully

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - ../data/minio/data1-1:/data1
      - ../data/minio/data1-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.16

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - ../data/minio/data2-1:/data1
      - ../data/minio/data2-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.17

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - ../data/minio/data3-1:/data1
      - ../data/minio/data3-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.18

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - ../data/minio/data4-1:/data1
      - ../data/minio/data4-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.19

  awari-minio-nginx:
    image: nginx:1.19.2-alpine
    hostname: awari-nginx
    volumes:
      - ../data/minio/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.20

  # Airflow Services
  awari-airflow-postgres:
    image: postgres:12
    container_name: awari-airflow-postgres
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    env_file:
      - ../data/airflow/.env
    volumes:
      - ../data/airflow/postgres-data:/var/lib/postgresql/data
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.110

  awari-airflow-scheduler:
    <<: [*awari-airflow-common, *awari-airflow-depends-on]
    container_name: awari-airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.111

  awari-airflow-webserver:
    <<: [*awari-airflow-common, *awari-airflow-depends-on]
    container_name: awari-airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
        awari-pipelines:
          ipv4_address: 172.18.0.112
  
  awari-airflow-init:
    <<: *awari-airflow-common
    container_name: awari-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/downloads
        chmod 777 -R /sources/downloads
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,downloads}
        exec /entrypoint airflow version
    networks:
      - awari-pipelines
